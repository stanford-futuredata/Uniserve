syntax = "proto3";

option java_multiple_files = true;
option java_package = "edu.stanford.futuredata.uniserve";
option java_outer_classname = "DatastoreDatastoreProto";

package datastoredatastore;

// Communication between datastores.
service DataStoreDataStore {
    // Notify the primary a replica must be updated to the latest version.
    rpc BootstrapReplica (BootstrapReplicaMessage) returns (BootstrapReplicaResponse) {}
    // Simply (eventually consistent) write to a replica.
    rpc SimpleReplicaWrite (stream ReplicaWriteMessage) returns (stream ReplicaWriteResponse) {}
    // Write to a replica.
    rpc ReplicaWrite (stream ReplicaWriteMessage) returns (stream ReplicaWriteResponse) {}
    // DataStorePing a datastore to see if it's alive.
    rpc DataStorePing (DataStorePingMessage) returns (DataStorePingResponse) {}
    // Get data for an anchored shuffle.
    rpc AnchoredShuffle (AnchoredShuffleMessage) returns (stream AnchoredShuffleResponse) {}
    // Get data for a shuffle.
    rpc Shuffle (ShuffleMessage) returns (stream ShuffleResponse) {}
}

message ReplicaWriteMessage {
    int32 shard = 1;
    bytes serializedQuery = 2;
    bytes rowData = 3;
    int32 versionNumber = 4;
    int32 writeState = 5;
    int64 txID = 6;
}

message ReplicaWriteResponse {
    int32 returnCode = 1;
}

message BootstrapReplicaMessage {
    int32 shard = 1;
    int32 versionNumber = 2;
    int32 dsID = 3;
}

message BootstrapReplicaResponse {
    int32 returnCode = 1;
    int32 versionNumber = 2;
    bytes writeQueries = 3;
    bytes writeData = 4;
}

message DataStorePingMessage {}

message DataStorePingResponse {}

message ReplicaRegisterMVMessage {
    int32 shard = 1;
    bytes serializedQuery = 2;
    string name = 3;
}

message ReplicaRegisterMVResponse {
    int32 returnCode = 1;
}

message AnchoredShuffleMessage {
    int32 shardNum = 1;
    int64 txID = 2;
    repeated int32 partitionKeys = 3;
    int32 repartitionShardNum = 4;
    int32 numRepartitions = 5;
    bytes serializedQuery = 6;
    int64 lastCommittedVersion = 7;
    bool targetShardIntermediate = 8;
}

message AnchoredShuffleResponse {
    int32 returnCode = 1;
    bytes shuffleData = 2;
}

message ShuffleMessage {
    int32 shardNum = 1;
    int64 txID = 2;
    int32 repartitionNum = 3;
    int32 numRepartition = 4;
    bytes serializedQuery = 5;
}

message ShuffleResponse {
    int32 returnCode = 1;
    bytes shuffleData = 2;
}
